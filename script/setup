#!/bin/bash -e

# Install brew dependencies.
install_brew() {
  echo "Running brew..."
  brew bundle --file=brew/Brewfile
}

# Install ZIM.
install_zim() {
  if [ -d "$HOME/.zim" ]; then
    echo "Skipping zim installation..."
    return 0;
  fi

  echo "Installing zim..."
  git clone --recursive https://github.com/Eriner/zim.git "$HOME/.zim"

  switch_to_zsh
  configure_zim
}

# Set zsh as the default shell.
switch_to_zsh() {
  if [ "$(dscl . -read /Users/$(whoami) UserShell | cut -d ' ' -f 2)" == "/bin/zsh" ]; then
    echo "Skipping setting zsh as default shell..."
    return 0;
  fi

  echo "Setting zsh as default shell..."
  sudo chsh -s "$(which zsh)" "$USER"
}

# Custom zsh modules for zim.
configure_zim() {
  echo "Initializing zim templates..."
  for template_file in ${ZDOTDIR:-${HOME}}/.zim/templates/*; do
    user_file="${ZDOTDIR:-${HOME}}/.${template_file:t}"
    touch ${user_file}
    ( print -rn "$(<${template_file})$(<${user_file})" >! ${user_file} ) 2>/dev/null
  done

  echo "Symlinking custom modules..."
  rm -rf ~/.zim/modules/custom
  ln -sfv $(pwd)/library/zsh/custom ~/.zim/modules/custom | nl -bn

  echo "Symlinking npm module..."
  ln -sfv $(pwd)/library/zsh/npm ~/.zim/modules/npm | nl -bn

  echo "Symlinking sublime module..."
  ln -sfv $(pwd)/library/zsh/sublime ~/.zim/modules/sublime | nl -bn
}

# Add vim Vundle.
configure_vim() {
  if [ -e $HOME/.vim/bundle/Vundle.vim ]; then
    echo "Skipping vim vundle..."
    return 0;
  fi

  echo "Installing vim vundle..."
  git clone https://github.com/gmarik/Vundle.vim.git "$HOME/.vim/bundle/Vundle.vim"
  vim -u $HOME/.vimrc.bundles +PluginUpdate +qa
}

# Setup rc files.
symlink_dotfiles() {
  echo "Symlinking dotfiles..."
  rcup -fvd packages | nl -bn
}

# Install latest node.js.
install_nodejs() {
  if [ ! -x "$(which n 2> /dev/null)" ]; then
    return 1;
  fi

  echo "Installing latest node.js..."
  sudo mkdir -p /usr/local/n
  sudo chown -R $(whoami) /usr/local/n
  sudo chown -R $(whoami) /usr/local/bin /usr/local/lib /usr/local/include /usr/local/share
  n latest
}

# Configure duti default file handlers.
configure_duti() {
  echo "Applying duti defaults..."

  # VS Code
  local vsCodeExtensions=(json md py sh yaml yml)
  for extension in "${vsCodeExtensions[@]}"
  do
    duti -s com.microsoft.VSCode .${extension} all
  done

  # The Unarchiver
  local unarchiverExtensions=(zip rar)
  for extension in "${unarchiverExtensions[@]}"
  do
    duti -s com.macpaw.site.theunarchiver .${extension} all
  done
}

# Sublime Text 3.
configure_sublime() {
  if [ -e ~/Library/Application\ Support/Sublime\ Text\ 3/Installed\ Packages/Package\ Control.sublime-package ]; then
    echo "Skipping Sublime defaults..."
    return 0;
  fi

  echo "Applying Sublime defaults..."
  mkdir -p ~/Library/Application\ Support/Sublime\ Text\ 3/Installed\ Packages/
  curl https://packagecontrol.io/Package%20Control.sublime-package -o ~/Library/Application\ Support/Sublime\ Text\ 3/Installed\ Packages/Package\ Control.sublime-package
  rm -rf ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/User
  ln -sfv $(pwd)/User ~/Library/Application\ Support/Sublime\ Text\ 3/Packages
}

# Configure iTerm defaults.
configure_iterm() {
  if [ -e ~/Library/Application\ Support/iTerm2/DynamicProfiles ]; then
    echo "Skipping iTerm defaults..."
    return 0;
  fi

  echo "Applying iTerm defaults..."
  mkdir -p ~/Library/Application\ Support/iTerm2/DynamicProfiles
  ln -sfv $(pwd)/library/iterm/profiles/default.json ~/Library/Application\ Support/iTerm2/DynamicProfiles
  source library/iterm/defaults
}

# Configure macOS defaults.
configure_macos() {
  echo "Applying macOS defaults..."
  source macos/defaults
}

install_brew
install_zim
symlink_dotfiles
install_nodejs
configure_duti
configure_vim
configure_sublime
configure_iterm
configure_macos
